// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Docs: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#disambiguating-relations

model User {
  userId            Int     @id @default(autoincrement())
  cognitoId         String  @unique
  username          String  @unique
  profilePictureUrl String?
  teamId            Int?

  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team?            @relation(fields: [teamId], references: [id])
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   Int
  assignedUserId Int?

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}

// The provided code is a Prisma schema file that defines the data models and their relationships for a PostgreSQL database. Here's a breakdown of the key components:

// ### 1. **Generators and Datasources**
// - **Generator**: 
//   ```prisma
//   generator client {
//     provider = "prisma-client-js"
//   }
//   ```
//   This section specifies that the Prisma Client will be generated using the JavaScript provider. The Prisma Client is an auto-generated and type-safe query builder for your database.

// - **Datasource**: 
//   ```prisma
//   datasource db {
//     provider = "postgresql"
//     url      = env("DATABASE_URL")
//   }
//   ```
//   This defines the database connection. It uses PostgreSQL as the database provider and retrieves the connection URL from an environment variable named `DATABASE_URL`.

// ### 3. **Relationships**
// - The models are interconnected through relationships:
//   - `User` can have many `Task` instances (as an author or assignee).
//   - `Team` can have many `User` instances.
//   - `Project` can have many `Task` instances.
//   - `Task` can have many `Comment` and `Attachment` instances.

// ### 4. **Detailed redlationships between user & task**

// - **Authorship**: A `User` can create multiple `Task` instances. This is represented by the `authoredTasks` field in the `User` model and the `author` field in the `Task` model. The relationship is one-to-many, meaning one user can author many tasks, but each task has only one author.

// - **Assignment**: A `User` can be assigned multiple `Task` instances. This is represented by the `assignedTasks` field in the `User` model and the `assignee` field in the `Task` model. This relationship is also one-to-many, meaning one user can be assigned many tasks, but each task can have only one assignee (though it can be `null` if no user is assigned).
